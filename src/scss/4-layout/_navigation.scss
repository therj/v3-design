
@use '../1-helpers/colors' as clr;
@use '../1-helpers/functions' as fn;
@use '../3-basics/global' as g;

:root {
  .nav__theme {
    &--light,
    &--dark {
      z-index: var(--z-theme);
    }
    &--light {
      display: none;
    }
  }
  &[data-theme='dark'] {
    .nav__theme {
      &--dark {
        display: none;
      }
      &--light {
        display: unset;
      }
    }
  }
}

body {
  @mixin hideScrollbar {
    &::-webkit-scrollbar {
      display: none;
    }
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
  // @include hideScrollbar;

  &.scroll-lock {
    // height: 100vh;
    // width: 100%;
    // overflow: hidden;

    // @media screen and (min-width:1300px) {
    //   transform: translateX(-50%);
    //   margin-left: calc(50% - 8px);
    // }
  }
}
.nav {
  $nav-height: g.$nav-height;
  $poly-height: g.$poly-height;
  // TODO: set multiplier 1x!
  $multiplier: 10;
  $ham-rotate-duration: 200ms * $multiplier;
  $ham-hide-delay: $ham-rotate-duration * 0.2;
  $ham-show-delay: $ham-rotate-duration * 0.8;
  $ham-opacity-duration: $ham-rotate-duration/2;

  filter: var(--nav-drop-shadow);
  // filter: drop-shadow(0px 0px 4px  rgba($clr,1));

  z-index: var(--z-nav);
  & > * {
    z-index: var(--z-nav-children);
  }
  height: #{$nav-height};
  margin-bottom: #{$poly-height};
  overflow-y: visible;
  // overflow-y: hidden;
  background: var(--nav-bg);
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  padding: 12px 20px;
  transition: transform 200ms ease-out;
  position: sticky;
  top: 0;

  // &:has(&__ham + &__toggle:checked) &__menu {
  //   background-color: red !important;
  // }

  &--hide {
    transform: translate3d(0, -100%, 0);
    // transform: scale3d(1,0,1);
    transition: transform 200ms ease-in;
  }
  &__logo {
    z-index: var(--z-logo);
    img {
      width: 40px;
      height: 40px;
      display: block;
    }
  }

  &__theme {
    &--light,
    &--dark {
      --dim: 30px;
      img {
        display: block;
        height: var(--dim);
        width: var(--dim);
      }
    }
  }
  // when nav is hidden push menu further down (else poly-height is )
  &--hide &__toggle {
    & ~ .nav__menu {
      transform: translate3d(0, calc(100vh + #{$poly-height+$nav-height}), 0);
    }
  }
  &__toggle {
    display: none;
    & ~ .nav__menu {
      transform: translate3d(0, calc(100vh + #{$poly-height}), 0);
    }
    // unchecked state!
    & + .nav__ham .nav__ham {
      &--small {
        width: 45%;
        transform-origin: 0% 0%;
        transition: transform $ham-rotate-duration ease-in;
      }
      &--large {
        width: 90%;
        opacity: 1;
        transition: opacity $ham-opacity-duration $ham-show-delay ease;
      }
    }
    // Enabled the menu & x
    &:checked {
      // show poly
      & + .nav__poly::after {
        transform: inherit;
        transform: unset; //inherit, else initial
      }
      // show the menu
      & ~ .nav__menu {
        transform: translate3d(0, $nav-height + $poly-height, 0);
        // transform: translate3d(0, 178px, 0);
      }
      // and rotate the bars
      & + .nav__ham {
        // TODO: Remove one of these
        // Option 1. Use siblings, and BEM friendly
        .nav__ham {
          &--small {
            // first span!
            transform: rotate(45deg) scale(2.5, 1);

            // last span!
            & ~ .nav__ham--small {
              transform: rotate(-45deg) scale(2.5, 1);
            }
          }
          // Middle span
          &--large {
            opacity: 0;
            transition: opacity $ham-opacity-duration $ham-hide-delay ease-in;
          }
        }
        // Option 2. n-th of type && dev friendly?
        span {
          &:nth-of-type(1) {
            transform: rotate(45deg) scale(2.5, 1);
          }
          &:nth-of-type(2) {
            opacity: 0;
            transition: opacity $ham-opacity-duration $ham-hide-delay ease-in;
          }
          &:nth-of-type(3) {
            transform: rotate(-45deg) scale(2.5, 1);
          }
        }
      }
    }
  }
  &__ham {
    cursor: pointer;
    height: 40px;
    width: 40px;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    z-index: var(--z-ham);
    & > * {
      z-index: inherit;
      background: var(--ham-bg);
      border-radius: 500px;
      height: 6px;
      // transform: scale(100%);
    }
  }

  &__poly {
    &:after {
      // no index will display over open menu
      // z-index: 49; //less than nav
      content: '';
      position: absolute;
      height: #{$poly-height};
      display: block;
      // width: 100%;
      // flex-basis: 100%;
      top: #{$nav-height};
      left: 0;
      right: 0;
      background: var(--poly-bg);
      clip-path: polygon(0 0, 100% 100%, 100% 0);
      // transform-origin: top left;
      // transform: translate3d(0, 0%, 0);
      // translateZ to -200% or higher (if nav menu is larger than nav poly), keep it close because animation will start at given distance!
      transform-origin: top left;
      // height: $poly-height;
      // transition: height 200ms ease-out;
      // transform: scale(1,1);
      transition: transform 200ms ease-out;
      // -webkit-transition: transform 200ms ease-in-out;
      // backface-visibility: hidden;
      // outline: 1px solid transparent;
      // outline-offset: -5px;
      // border-radius: 0;
    }
    &--hide:after {
      transform: translate3d(0, -#{$poly-height}, 0);
      transform-origin: top left;
      // height: 0;
      // transition: height 200ms ease-in;
      // transform: scale(1,0);
      transition: transform 200ms ease-in;
    }
  }

  &__menu {
    // try box shadow!
    // box-shadow: 30px -30px 0px 10px green;
    // padding-top: 16px;

    &::before {
      // z-index: 4;
      content: '';
      // background: red;
      // z-index: 400;
      position: absolute;
      // 2px for safety
      // render leak on top when ::after is disabled,
      // bottom leak when after is disabled and __menu top: -ve height is odd number!
      // Upper/lower nav-poly won't be paralled anyomore!
      // top: -#{$poly-height + 2px};
      top: -$poly-height;
      // top: 20px;
      // top: 64px;
      // bottom leak when after is disabled and __menu top: +ve height is odd number!
      // height: $poly-height + 2px;
      height: $poly-height;
      // z-index: 45;
      right: 0;
      left: 0;
      background: inherit;
      // background: lightcoral;
      // background: rgba(lightcoral, 60%);
      // clip-path: polygon(0 0px, 0 100%, 100% 100%, 100% calc(100% - 16px));
      clip-path: polygon(0 0px, 0 100%, 100% 100%);
      // clip-path: polygon(100% 100%, 100% 0, 0 0);
    }

    &::after {
      // offset-rotate: 10;
      // z-index: 4;
      $line-width: 4px;
      content: '';
      position: absolute;
      top: -($poly-height);
      $height: $poly-height + $line-width;
      height: $height;
      right: 0;
      left: 0;
      // background: var(--bg-color);
      background: var(--bg-color);
      // background: rgba(rgb(136, 255, 0), 40%);
      // background: white;
      // box-shadow: white;
      // box-shadow: inset 10px 10px 5px 400px var(--bg-color);

      // z-index: -3;
      // width: 120%;
      // transform-origin: 50% 50%;
      // transform: rotate(7.5deg);
      // clip-path: polygon(0 0, 0 4px, 100% 4px, 100% 128px);
      // clip-path: polygon(0 0, 100% 84%, 100% 100%, 0 18%);
      // clip-path: polygon(0 0, 0 24px, 100% 100%, 100% calc(100% - 24px));
      clip-path: polygon(
        0 0,
        0 $line-width,
        100% $height,
        100% calc(#{$height} - #{$line-width})
      );
    }

    background: var(--menu-bg);
    font-weight: bold;
    font-size: 3rem;
    // display: flex;
    justify-content: center;
    position: absolute;
    width: 100%;
    // top: 10px; // nav height
    top: 0;
    left: 0;
    // min-height: 100vh;
    // if you don't have content to scroll, don't make it go beyond screen to 100vh (pushed by nav+poly)...
    min-height: calc(100vh - #{$nav-height+$poly-height});
    transition: transform 200ms ease-in-out;
    display: flex;
    &__items {
      &--container {
        // height: fit-content;
        // justify-content: center;
      }
      display: flex;
      gap: 4px;
      flex-direction: column;
      justify-content: space-evenly;
      list-style: none;
      padding: 0;

      &--item {
        @mixin hoverStyle($color: clr.$blue-100, $bdrColor:$color) {
          background: $color;
          -webkit-background-clip: text;
          border-radius: 4px;
          border-color: $bdrColor
        }
        // center or left!
        display: flex;

        &:last-of-type {
          a {
            @include hoverStyle('X',clr.$purple-300);
          }
        }

        a {
          width: 100%;
          text-align: center;
          // Either flex or padding!
          // display: block;
          // width: 100%;
          border: 2px solid transparent;
          padding: 5px 20px;
          line-height: 2em;

          // text-align: center;
          // color: clr.$grey-25;
          // -webkit-background-cl
          // -webkit-background-clip: text;
          // background-clip: text;
          background: var(--menu-text-bg);
          // background: clr.$grad-300;
          -webkit-background-clip: text;
          // background-clip: text;
          background-size: 100%;
          color: transparent;
          // background: var(--ham-bg);
          text-decoration: none;

          &:focus,
          &:hover {
            @include hoverStyle();
          }
        }
      }
    }
  }
}

.intro {
  // position: relative;
  // padding-top: 64px;
}
